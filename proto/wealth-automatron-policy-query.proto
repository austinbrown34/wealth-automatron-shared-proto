syntax = "proto3";

package wealth_automatron_policy_query;

option go_package = "./";

service WealthAutomatronPolicyQueryService {
  rpc FindPolicy(FindPolicyRequest) returns (FindPolicyResponse) {}
  rpc FindAllPolicies(FindAllPoliciesRequest)
      returns (FindAllPoliciesResponse) {}
}

message Provider {
  string network = 1;
  string networkNodeEndpoint = 2;
}

message Wallet {
  string key = 1;
  Provider provider = 2;
}

message Fund {
  string address = 1;
  Wallet wallet = 2;
}

enum AssetType {
  CRYPTO_TOKEN = 0;
  LIQUIDITY_POSITION = 1;
  DEBT_POSITION = 2;
}

enum WatchType {
  POSITION = 0;
  POOL = 1;
  TOKEN_PAIR = 2;
  TOKEN = 3;
  ENDPOINT = 4;
}

message Asset {
  string identifier = 1;
  AssetType type = 2;
}

message Watch {
  string name = 1;
  WatchType type = 2;
  map<string, string> params = 3;
  repeated Asset assets = 4;
  string schedule = 5;
}

message Policy {
  string id = 1;
  string name = 2;
  bool isActive = 3;
  Fund fund = 4;
  repeated Watch watches = 5;
}

message FindAllPoliciesResponseData {
  repeated Policy policies = 3;
  int32 total = 4;
  int32 count = 5;
  int32 page = 6;
}

// FindAllPolicies

message FindAllPoliciesRequest { int32 page = 1; }

message FindAllPoliciesResponse {
  int32 status = 1;
  repeated string error = 2;
  FindAllPoliciesResponseData data = 3;
}

// FindPolicy

message FindPolicyRequest { string id = 1; }

message FindPolicyResponse {
  int32 status = 1;
  repeated string error = 2;
  Policy data = 3;
}