syntax = "proto3";
// import "google/protobuf/any.proto";

package wealth_automatron_policy_query;

option go_package = "./";

service WealthAutomatronPolicyQueryService {
  rpc FindPolicy(FindPolicyRequest) returns (FindPolicyResponse) {}
  rpc FindAllPolicies(FindAllPoliciesRequest)
      returns (FindAllPoliciesResponse) {}
}

message Provider {
  string network = 1;
  string networkNodeEndpoint = 2;
}

message Wallet {
  string key = 1;
  Provider provider = 2;
}

message Fund {
  string address = 1;
  string name = 2;
  Wallet wallet = 3;
}

enum AssetType {
  CRYPTO_TOKEN = 0;
  LIQUIDITY_POSITION = 1;
  DEBT_POSITION = 2;
}

enum WatchType {
  POSITION = 0;
  POOL = 1;
  TOKEN_PAIR = 2;
  TOKEN = 3;
  ENDPOINT = 4;
}

enum ActionType {
  CREATE_LIQUIDITY_POSITION_VIA_PERCENTAGE = 0;
  CREATE_LIQUIDITY_POSITION_VIA_EXPLICIT = 1;
  CREATE_LIQUIDITY_POSITION_VIA_MINMAX = 2;
  REMOVE_LIQUIDITY_FROM_POSITION = 3;
  ADD_LIQUIDITY_TO_POSITION = 4;
  PURGE_LIQUIDITY_POSITION = 5;
  SUPPLY_ASSET_LIQUIDITY = 6;
  STAKE_ASSET = 7;
  BORROW_AGAINST_ASSET = 8;
  REPAY_ASSET_LOAN = 9;
  SWAP_ASSETS = 10;
  MOVE_ASSET = 11;
  UPDATE_WATCH_ASSETS = 12;
  UPDATE_WATCH_PARAMS = 13;
  UPDATE_WATCH_SCHEDULE = 14;
  REMOVE_WATCH = 15;
  REBALANCE_ASSETS_GIVEN_RATIO = 16;
}

enum FetchType {
  BOLLINGER = 0;
  FETCH_ENDPOINT = 1;
}

message Asset {
  string identifier = 1;
  AssetType type = 2;
}

message Watch {
  string name = 1;
  WatchType type = 2;
  map<string, bytes> params = 3;
  repeated Asset assets = 4;
  map<string, bytes> options = 5;
}

message Action {
  ActionType type = 1;
  int32 priority = 2;
  map<string, bytes> params = 3;
}

message Fetch {
  string identifier = 1;
  FetchType type = 2;
  map<string, bytes> params = 3;
}


message Rule {
  string name = 1;
  map<string, bytes> conditions = 2;
  repeated Action actions = 3;
  repeated Fetch fetches = 4;
}

message Policy {
  string id = 1;
  string name = 2;
  string description = 3;
  bool deleted = 4;
  bool isActive = 5;
  Fund fund = 6;
  repeated Watch watches = 7;
  repeated Rule rules = 8;
}

message FindAllPoliciesResponseData {
  repeated Policy policies = 1;
  int32 total = 2;
  int32 count = 3;
  int32 page = 4;
}

// FindAllPolicies

message FindAllPoliciesRequest { int32 page = 1; }

message FindAllPoliciesResponse {
  int32 status = 1;
  repeated string error = 2;
  FindAllPoliciesResponseData data = 3;
}

// FindPolicy

message FindPolicyRequest { string id = 1; }

message FindPolicyResponse {
  int32 status = 1;
  repeated string error = 2;
  Policy data = 3;
}