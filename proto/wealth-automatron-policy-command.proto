syntax = "proto3";

package wealth_automatron_policy_command;

option go_package = "./";

service WealthAutomatronPolicyCommandService {
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {}
  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {}
}

// CreatePolicy

message ProviderRequest {
  string network = 1;
  string networkNodeEndpoint = 2;
}

message WalletRequest {
  string key = 1;
  ProviderRequest provider = 2;
}

message FundRequest {
  string address = 1;
  WalletRequest wallet = 2;
}

enum AssetType {
  CRYPTO_TOKEN = 0;
  LIQUIDITY_POSITION = 1;
  DEBT_POSITION = 2;
}

enum WatchType {
  POSITION = 0;
  POOL = 1;
  TOKEN_PAIR = 2;
  TOKEN = 3;
  ENDPOINT = 4;
}

enum ActionType {
  CREATE_LIQUIDITY_POSITION = 0;
  REMOVE_LIQUIDITY_FROM_POSITION = 1;
  ADD_LIQUIDITY_TO_POSITION = 2;
  PURGE_LIQUIDITY_POSITION = 3;
  SUPPLY_ASSET_LIQUIDITY = 4;
  STAKE_ASSET = 5;
  BORROW_AGAINST_ASSET = 6;
  REPAY_ASSET_LOAN = 7;
  SWAP_ASSETS = 8;
  MOVE_ASSET = 9;
  UPDATE_WATCH_ASSETS = 10;
  UPDATE_WATCH_PARAMS = 11;
  UPDATE_WATCH_SCHEDULE = 12;
  REMOVE_WATCH = 13;
}

enum FetchType {
  BOLLINGER = 0;
  FETCH_ENDPOINT = 1;
}

message AssetRequest {
  string identifier = 1;
  AssetType type = 2;
}

message Struct {
  // Unordered map of dynamically typed values.
  map<string, MyValue> fields = 1;
}


message ListValue {
  // Repeated field of dynamically typed values.
  repeated MyValue values = 1;
}

enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}

message MyValue {
  oneof kind {
    int32 int_value = 1;
    string string_value = 2;
    bool bool_value = 3;
    float float_value = 4;
    double double_value = 5;
    ListValue list_value = 6;
    Struct struct_value = 7;
    NullValue null_value = 8;

  }
}

message WatchRequest {
  string name = 1;
  WatchType type = 2;
  map<string, MyValue> params = 3;
  repeated AssetRequest assets = 4;
  string schedule = 5;
}

message ActionRequest {
  ActionType type = 1;
  map<string, MyValue> params = 2;
}

message FetchRequest {
  string identifier = 1;
  FetchType type = 2;
  map<string, MyValue> params = 3;
}


message RuleRequest {
  string name = 1;
  map<string, MyValue> conditions = 2;
  repeated ActionRequest actions = 3;
  repeated FetchRequest fetches = 4;
}



message CreatePolicyRequest {
  string name = 1;
  FundRequest fund = 2;
  repeated WatchRequest watches = 3;
  repeated RuleRequest rules = 4;
}

message CreatePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
  string data = 3;
}

// DeletePolicy

message DeletePolicyRequest { string id = 1; }

message DeletePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
}