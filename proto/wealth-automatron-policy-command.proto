syntax = "proto3";

package wealth_automatron_policy_command;

import "google/protobuf/struct.proto";

message ExampleMessage {
  google.protobuf.Value anything = 1;
}

// import "google/protobuf/struct.proto";

message Any {
  string type_url = 1;
  bytes value = 2;
}

option go_package = "./";

service WealthAutomatronPolicyCommandService {
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {}
  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {}
}

// CreatePolicy

message ProviderRequest {
  string network = 1;
  string networkNodeEndpoint = 2;
}

message WalletRequest {
  string key = 1;
  ProviderRequest provider = 2;
}

message FundRequest {
  string address = 1;
  WalletRequest wallet = 2;
}

enum AssetType {
  CRYPTO_TOKEN = 0;
  LIQUIDITY_POSITION = 1;
  DEBT_POSITION = 2;
}

enum WatchType {
  POSITION = 0;
  POOL = 1;
  TOKEN_PAIR = 2;
  TOKEN = 3;
  ENDPOINT = 4;
}

enum ActionType {
  CREATE_LIQUIDITY_POSITION = 0;
  REMOVE_LIQUIDITY_FROM_POSITION = 1;
  ADD_LIQUIDITY_TO_POSITION = 2;
  PURGE_LIQUIDITY_POSITION = 3;
  SUPPLY_ASSET_LIQUIDITY = 4;
  STAKE_ASSET = 5;
  BORROW_AGAINST_ASSET = 6;
  REPAY_ASSET_LOAN = 7;
  SWAP_ASSETS = 8;
  MOVE_ASSET = 9;
  UPDATE_WATCH_ASSETS = 10;
  UPDATE_WATCH_PARAMS = 11;
  UPDATE_WATCH_SCHEDULE = 12;
  REMOVE_WATCH = 13;
}

enum FetchType {
  BOLLINGER = 0;
  FETCH_ENDPOINT = 1;
}

message AssetRequest {
  string identifier = 1;
  AssetType type = 2;
}

message WatchRequest {
  string name = 1;
  WatchType type = 2;
  map<string, string> params = 3;
  repeated AssetRequest assets = 4;
  string schedule = 5;
}

message ActionRequest {
  AssetType type = 2;
  map<string, Any> params = 3;
}

message FetchRequest {
  string identifier = 1;
  FetchType type = 2;
  map<string, Any> params = 3;
}


// interface ConditionProperties {
//   fact: string;
//   operator: string;
//   value: { fact: string } | any;
//   path?: string;
//   priority?: number;
//   params?: Record<string, any>;
// }

// type NestedCondition = ConditionProperties | TopLevelCondition;
// type AllConditions = { all: NestedCondition[] };
// type AnyConditions = { any: NestedCondition[] };
// export type TopLevelCondition = AllConditions | AnyConditions;







message FactRequest {
  string fact = 1;
}


message ValueRequest {
  oneof value_request {
    Any any_value = 1;
    FactRequest fact_value = 2;
  }
}





message ConditionProperties {
  string fact = 1;
  string operator = 2;
  ValueRequest value = 3;
  string path = 4;
  int32 priority = 5;
  map<string, Any> params = 6;
}


message Outer {                  // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      int64 ival = 1;
      bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      int32 ival = 1;
      bool  booly = 2;
    }
  }
}


message AnyCondition {
  repeated NestedCondition any = 1;
}

message AllCondition {
  repeated NestedCondition all = 1;
}


message NestedCondition {
  oneof nesty {
    TopLevelCondition top = 1;
    ConditionProperties cond = 2;
  }
}





message TopLevelCondition {
  oneof condition {
    AllCondition all = 1;
    AnyCondition any = 2;
  }
}


message RuleRequest {
  string name = 1;
  TopLevelCondition conditions = 2;
  repeated ActionRequest actions = 3;
  repeated FetchRequest fetches = 4;
}



message CreatePolicyRequest {
  string name = 1;
  FundRequest fund = 2;
  repeated WatchRequest watches = 3;
  repeated RuleRequest rules = 4;
}

message CreatePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
  string data = 3;
}

// DeletePolicy

message DeletePolicyRequest { string id = 1; }

message DeletePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
}