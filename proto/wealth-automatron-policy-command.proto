syntax = "proto3";

package wealth_automatron_policy_command;

option go_package = "./";

service WealthAutomatronPolicyCommandService {
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {}
  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {}
}

// CreatePolicy

message ProviderRequest {
  string network = 1;
  string networkNodeEndpoint = 2;
}

message WalletRequest {
  string key = 1;
  ProviderRequest provider = 2;
}

message FundRequest {
  string address = 1;
  WalletRequest wallet = 2;
}

enum AssetType {
  CRYPTO_TOKEN = 0;
  LIQUIDITY_POSITION = 1;
  DEBT_POSITION = 2;
}

enum WatchType {
  POSITION = 0;
  POOL = 1;
  TOKEN_PAIR = 2;
  TOKEN = 3;
  ENDPOINT = 4;
}

enum ActionType {
  CREATE_LIQUIDITY_POSITION_VIA_PERCENTAGE = 0;
  CREATE_LIQUIDITY_POSITION_VIA_EXPLICIT = 1;
  CREATE_LIQUIDITY_POSITION_VIA_MINMAX = 2;
  REMOVE_LIQUIDITY_FROM_POSITION = 3;
  ADD_LIQUIDITY_TO_POSITION = 4;
  PURGE_LIQUIDITY_POSITION = 5;
  SUPPLY_ASSET_LIQUIDITY = 6;
  STAKE_ASSET = 7;
  BORROW_AGAINST_ASSET = 8;
  REPAY_ASSET_LOAN = 9;
  SWAP_ASSETS = 10;
  MOVE_ASSET = 11;
  UPDATE_WATCH_ASSETS = 12;
  UPDATE_WATCH_PARAMS = 13;
  UPDATE_WATCH_SCHEDULE = 14;
  REMOVE_WATCH = 15;
  REBALANCE_ASSETS_GIVEN_RATIO = 16;
}

enum FetchType {
  BOLLINGER = 0;
  FETCH_ENDPOINT = 1;
}

message AssetRequest {
  string identifier = 1;
  AssetType type = 2;
}


message WatchRequest {
  string name = 1;
  WatchType type = 2;
  map<string, bytes> params = 3;
  repeated AssetRequest assets = 4;
  map<string, bytes> options = 5;
}

message ActionRequest {
  ActionType type = 1;
  int32 priority = 2;
  map<string, bytes> params = 3;
}

message FetchRequest {
  string identifier = 1;
  FetchType type = 2;
  map<string, bytes> params = 3;
}


message RuleRequest {
  string name = 1;
  map<string, bytes> conditions = 2;
  repeated ActionRequest actions = 3;
  repeated FetchRequest fetches = 4;
}



message CreatePolicyRequest {
  string name = 1;
  FundRequest fund = 2;
  repeated WatchRequest watches = 3;
  repeated RuleRequest rules = 4;
}

message CreatePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
  string data = 3;
}

// DeletePolicy

message DeletePolicyRequest { string id = 1; }

message DeletePolicyResponse {
  int32 status = 1;
  repeated string error = 2;
}